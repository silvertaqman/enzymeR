Km = coef(m)[2],
Vmax = coef(m)[1],
varVmax = summary(m)$coefficients[1, 2],
varKm = summary(m)$coefficients[2, 2])
}
)
parms
parms$m |>
confint()
parms$Vmax
parms
vcov(parms$m)
vcov(parms$m)[2,1]
parms
parms[[-m]]
parms[[-"m"]]
parms[[2:6]]
parms[[!"m"]]
parms[[-"m"]]
parms[["m"]]
parms[-["m"]]
parms[!["m"]]
parms[[setdiff(names(parms), "m")]]
names(parms)
setdiff(names(parms), "m")
parms[[setdiff(names(parms), "m")]]
parms[[setdiff(names(parms), "m")]]
parms[setdiff(names(parms), "m")]
parms$fits |>
confint() |>
with(parms, {rbind(Vmax=c(
Vmax - qt(level, df=nrow(df)-2) * varbeta0 / beta0^2,
Vmax + qt(level, df=nrow(df)-2) * varbeta0 / beta0^2)
)}) |>
with(parms, {})
parms$fits |>
confint() |>
with(parms, {rbind(Vmax=c(
Vmax - qt(level, df=nrow(df)-2) * varbeta0 / beta0^2,
Vmax + qt(level, df=nrow(df)-2) * varbeta0 / beta0^2)
)}) |>
with(parms, {rbind(Km=c(
Km - qt(level, df=nrow(df)-2) * sqrt(varbeta1 / beta0^2 + beta1^2 * varbeta0 / beta0^4 - 2 * beta1 * vcov(m)[2,1] / beta0^3),
Km + qt(level, df=nrow(df)-2) *sqrt(varbeta1 / beta0^2 + beta1^2 * varbeta0 / beta0^4 - 2 * beta1 * vcov(m)[2,1] / beta0^3)))})
parms$fits |>
confint() |>
with(parms, {rbind(Vmax=c(
Vmax - qt(level, df=nrow(df)-2) * varbeta0 / beta0^2,
Vmax + qt(level, df=nrow(df)-2) * varbeta0 / beta0^2)
)})
parms$fits |>
confint()
parms$m |>
confint() |>
with(parms, {rbind(Vmax=c(
Vmax - qt(level, df=nrow(df)-2) * varbeta0 / beta0^2,
Vmax + qt(level, df=nrow(df)-2) * varbeta0 / beta0^2)
)})
parms$m |>
confint()
with(parms, m |>
confint() |> rbind(Vmax=c(
Vmax - qt(level, df=nrow(df)-2) * varbeta0 / beta0^2,
Vmax + qt(level, df=nrow(df)-2) * varbeta0 / beta0^2)
))
level=.98
with(parms, m |>
confint() |> rbind(Vmax=c(
Vmax - qt(level, df=nrow(df)-2) * varbeta0 / beta0^2,
Vmax + qt(level, df=nrow(df)-2) * varbeta0 / beta0^2)
))
with(parms, m |>
confint() |> rbind(Vmax=c(
Vmax - qt(level, df=nrow(df)-2) * varbeta0 / beta0^2,
Vmax + qt(level, df=nrow(df)-2) * varbeta0 / beta0^2)
)) |>
with(parms, {rbind(Km=c(
Km - qt(level, df=nrow(df)-2) * sqrt(varbeta1 / beta0^2 + beta1^2 * varbeta0 / beta0^4 - 2 * beta1 * vcov(m)[2,1] / beta0^3),
Km + qt(level, df=nrow(df)-2) *sqrt(varbeta1 / beta0^2 + beta1^2 * varbeta0 / beta0^4 - 2 * beta1 * vcov(m)[2,1] / beta0^3)))})
with(parms, m |>
confint() |>
rbind(Vmax=c(
Vmax - qt(level, df=nrow(df)-2) * varbeta0 / beta0^2,
Vmax + qt(level, df=nrow(df)-2) * varbeta0 / beta0^2)) |>
rbind(Km=c(
Km - qt(level, df=nrow(df)-2) * sqrt(varbeta1 / beta0^2 + beta1^2 * varbeta0 / beta0^4 - 2 * beta1 * vcov(m)[2,1] / beta0^3),
Km + qt(level, df=nrow(df)-2) *sqrt(varbeta1 / beta0^2 + beta1^2 * varbeta0 / beta0^4 - 2 * beta1 * vcov(m)[2,1] / beta0^3))))
parms
with(parms, m |>
confint() |>
rbind(Vmax=c(
Vmax - qt(level, df=nrow(df)-2) * varbeta0 / beta0^2,
Vmax + qt(level, df=nrow(df)-2) * varbeta0 / beta0^2)) |>
rbind(Km=c(
Km - qt(level, df=nrow(df)-2) * sqrt(varbeta1 / beta0^2 + beta1^2 * varbeta0 / beta0^4 - 2 * beta1 * vcov(m)[2,1] / beta0^3),
Km + qt(level, df=nrow(df)-2) *sqrt(varbeta1 / beta0^2 + beta1^2 * varbeta0 / beta0^4 - 2 * beta1 * vcov(m)[2,1] / beta0^3)))) |>
cbind(estimate=parms[["beta0","beta1","Vmax","Km"]])
with(parms, m |>
confint() |>
rbind(Vmax=c(
Vmax - qt(level, df=nrow(df)-2) * varbeta0 / beta0^2,
Vmax + qt(level, df=nrow(df)-2) * varbeta0 / beta0^2)) |>
rbind(Km=c(
Km - qt(level, df=nrow(df)-2) * sqrt(varbeta1 / beta0^2 + beta1^2 * varbeta0 / beta0^4 - 2 * beta1 * vcov(m)[2,1] / beta0^3),
Km + qt(level, df=nrow(df)-2) *sqrt(varbeta1 / beta0^2 + beta1^2 * varbeta0 / beta0^4 - 2 * beta1 * vcov(m)[2,1] / beta0^3)))) |>
cbind(estimate=parms[names(parms)[2:5]])
with(parms, m |>
confint(level = level) |>
rbind(Vmax=c(
Vmax - qt(level, df=nrow(df)-2) * varbeta0 / beta0^2,
Vmax + qt(level, df=nrow(df)-2) * varbeta0 / beta0^2)) |>
rbind(Km=c(
Km - qt(level, df=nrow(df)-2) * sqrt(varbeta1 / beta0^2 + beta1^2 * varbeta0 / beta0^4 - 2 * beta1 * vcov(m)[2,1] / beta0^3),
Km + qt(level, df=nrow(df)-2) *sqrt(varbeta1 / beta0^2 + beta1^2 * varbeta0 / beta0^4 - 2 * beta1 * vcov(m)[2,1] / beta0^3)))) |>
cbind(estimate=parms[names(parms)[2:5]])
parms[-"m"]
parms["m"]
parms[!"m"]
source("R/fit_params.R")
df <- kinetics |>
dplyr::filter(ecnumber == "4.1.1.39", type=="irreversible") |>
dplyr::select(time, substrate) |>
dplyr::drop_na() |>
fit_params(df, model = "rate", method = "nonlinear")
df <- kinetics |>
dplyr::filter(ecnumber == "4.1.1.39", type=="irreversible") |>
dplyr::select(time, substrate) |>
tidyr::drop_na() |>
fit_params(df, model = "rate", method = "nonlinear")
unlist(parms[names(parms)[2:5]])
list(unlist(parms[names(parms)[2:5]]), statistics)
statistics <- with(parms, m |>
confint(level = level) |>
rbind(Vmax=c(
Vmax - qt(level, df=nrow(df)-2) * varbeta0 / beta0^2,
Vmax + qt(level, df=nrow(df)-2) * varbeta0 / beta0^2)) |>
rbind(Km=c(
Km - qt(level, df=nrow(df)-2) * sqrt(varbeta1 / beta0^2 + beta1^2 * varbeta0 / beta0^4 - 2 * beta1 * vcov(m)[2,1] / beta0^3),
Km + qt(level, df=nrow(df)-2) *sqrt(varbeta1 / beta0^2 + beta1^2 * varbeta0 / beta0^4 - 2 * beta1 * vcov(m)[2,1] / beta0^3)))) |>
cbind(estimate=parms[names(parms)[2:5]])
list(unlist(parms[names(parms)[2:5]]), statistics)
df
fit_params(df,model = "rate", method = "nonlinear")
credentials::set_github_pat()
statistics <- with(parms, {
m |>
confint(level = level) |>
rbind(Vmax=c(
Vmax - qt(level, df=nrow(df)-2) * varbeta0 / beta0^2,
Vmax + qt(level, df=nrow(df)-2) * varbeta0 / beta0^2)) |>
rbind(Km=c(
Km - qt(level, df=nrow(df)-2) * sqrt(varbeta1 / beta0^2 + beta1^2 * varbeta0 / beta0^4 - 2 * beta1 * vcov(m)[2,1] / beta0^3),
Km + qt(level, df=nrow(df)-2) *sqrt(varbeta1 / beta0^2 + beta1^2 * varbeta0 / beta0^4 - 2 * beta1 * vcov(m)[2,1] / beta0^3)))
}) |>
cbind(estimate=parms[names(parms)[2:5]])
source("R/fit_params.R")
fit_params(df,model = "rate", method = "nonlinear")
q()
library(renz)
renz::dir.MM()
renz::dir.MM
renz::dir.MM
load("data/kinetics.rda")
df
dfp
kinetics
df <- kinetics |> dplyr::filter(ecnumber == "4.1.1.39", type=="irreversible") |>
dplyr::select(time, substrate) |>
tidyr::drop_na()
df
m <- lm(I(1/v) ~ I(1/S), df)
data
df
kinetics
df <- kinetics |> dplyr::filter(ecnumber == "4.1.1.39", type=="irreversible") |>
dplyr::select(substrate,rate) |>
tidyr::drop_na()
df
names(df)<-c("S","v")
m <- lm(I(1/v) ~ I(1/S), df)
m
m$terms
m$qr
method = "hanes"
model = "one-substrate"
onesubstrate <- switch(
method,
"lineweaver" = with(df, {
m <- lm(I(1/v) ~ I(1/S), df)
m$params <- list(
Km = coef(m)[2] / coef(m)[1],
Vmax = 1 / coef(m)[1],
sebeta0 = summary(m)$coefficients[1, 2],
sebeta1 = summary(m)$coefficients[2, 2])
}),
"eadie" = with(df, {
m <- lm(v ~ I(v/S), df)
m$params <- list(
Km = -coef(m)[2],
Vmax = coef(m)[1],
sebeta0 = summary(m)$coefficients[1, 2],
sebeta1 = summary(m)$coefficients[2, 2])
}),
"hanes" = with(df, {
m <- lm(I(S/v) ~ S, df)
m$params <- list(
Km = coef(m)[1] / coef(m)[2],
Vmax = 1 / coef(m)[2],
varbeta0 = summary(m)$coefficients[1, 2],
varbeta1 = summary(m)$coefficients[2, 2])
}),
"nonlinear" = with(df, {
m <- nls(v ~ Vmax * S / (Km + S),
start = list(Vmax = max(v), Km = mean(S)), # make a better estimation
data = df)
m$params <- list(
Km = coef(m)[2],
Vmax = coef(m)[1],
varVmax = summary(m)$coefficients[1, 2],
varKm = summary(m)$coefficients[2, 2])
})
)
onesubstrate
onesubstrate <- switch(
method,
"lineweaver" = with(df, {
m <- lm(I(1/v) ~ I(1/S), df)
m$params <- list(
Km = coef(m)[2] / coef(m)[1],
Vmax = 1 / coef(m)[1],
sebeta0 = summary(m)$coefficients[1, 2],
sebeta1 = summary(m)$coefficients[2, 2])
return(m)
}),
"eadie" = with(df, {
m <- lm(v ~ I(v/S), df)
m$params <- list(
Km = -coef(m)[2],
Vmax = coef(m)[1],
sebeta0 = summary(m)$coefficients[1, 2],
sebeta1 = summary(m)$coefficients[2, 2])
return(m)
}),
"hanes" = with(df, {
m <- lm(I(S/v) ~ S, df)
m$params <- list(
Km = coef(m)[1] / coef(m)[2],
Vmax = 1 / coef(m)[2],
varbeta0 = summary(m)$coefficients[1, 2],
varbeta1 = summary(m)$coefficients[2, 2])
return(m)
}),
"nonlinear" = with(df, {
m <- nls(v ~ Vmax * S / (Km + S),
start = list(Vmax = max(v), Km = mean(S)), # make a better estimation
data = df)
m$params <- list(
Km = coef(m)[2],
Vmax = coef(m)[1],
seVmax = summary(m)$coefficients[1, 2],
seKm = summary(m)$coefficients[2, 2])
return(m)
})
)
onesubstrate
onesubstrate$params
coef(m)
coef(m)[1]
onesubstrate$params
m$params
m
onesubstrate$terms
onesubstrate$params
onesubstrate$params$Km
confint(m)
confint(onesubstrate)
confint(onesubstrate$params)
one_s <- switch(
method,
"lineweaver" = with(df, {
m <- lm(I(1/v) ~ I(1/S), df)
m$params <- list(
Km = as.double(coef(m)[2] / coef(m)[1]),
Vmax = as.double(1 / coef(m)[1]),
sebeta0 = summary(m)$coefficients[1, 2],
sebeta1 = summary(m)$coefficients[2, 2])
return(m)
}),
"eadie" = with(df, {
m <- lm(v ~ I(v/S), df)
m$params <- list(
Km = -as.double(coef(m)[2]),
Vmax = as.double(coef(m)[1]),
sebeta0 = summary(m)$coefficients[1, 2],
sebeta1 = summary(m)$coefficients[2, 2])
return(m)
}),
"hanes" = with(df, {
m <- lm(I(S/v) ~ S, df)
m$params <- list(
Km = as.double(coef(m)[1] / coef(m)[2]),
Vmax = as.double(1 / coef(m)[2]),
sebeta0 = summary(m)$coefficients[1, 2],
sebeta1 = summary(m)$coefficients[2, 2])
return(m)
}),
"nonlinear" = with(df, {
m <- nls(v ~ Vmax * S / (Km + S),
start = list(Vmax = max(v), Km = mean(S)), # make a better estimation
data = df)
m$params <- list(
Km = as.double(coef(m)[2]),
Vmax = as.double(coef(m)[1]),
sebeta0 = summary(m)$coefficients[1, 2],
sebeta1 = summary(m)$coefficients[2, 2])
return(m)
})
)
one_s
one_s
one_s$params
beta <- coef(one_s)
beta
attr(beta)<- NULL
beta
attr(beta)
class(beta)
names(beta)
names(beta) <- NULL
beta
statistics <- with(one_s$params, {
beta <- coef(one_s)
names(beta)<-NULL
one_s |>
confint(level = level) |>
rbind(Vmax=c(
Vmax - qt(level, df=nrow(df)-2) * sebeta0^2 / beta[1]^2,
Vmax + qt(level, df=nrow(df)-2) * sebeta0^2 / beta[1]^2)) |>
rbind(Km=c(
Km - qt(level, df=nrow(df)-2) * sqrt(sebeta1^2 / beta[1]^2 + beta[2]^2 * sebeta0 / beta[1]^4 - 2 * beta[2] * vcov(m)[2,1] / beta[1]^3),
Km + qt(level, df=nrow(df)-2) *sqrt(sebeta1 / beta[1]^2 + beta[2]^2 * sebeta0 / beta[1]^4 - 2 * beta[2] * vcov(m)[2,1] / beta[1]^3))) |>
cbind(estimate=parms[names(parms)[2:5]]) # add se, t and p value test
})
level=.98
statistics <- with(one_s$params, {
beta <- coef(one_s)
names(beta)<-NULL
one_s |>
confint(level = level) |>
rbind(Vmax=c(
Vmax - qt(level, df=nrow(df)-2) * sebeta0^2 / beta[1]^2,
Vmax + qt(level, df=nrow(df)-2) * sebeta0^2 / beta[1]^2)) |>
rbind(Km=c(
Km - qt(level, df=nrow(df)-2) * sqrt(sebeta1^2 / beta[1]^2 + beta[2]^2 * sebeta0 / beta[1]^4 - 2 * beta[2] * vcov(m)[2,1] / beta[1]^3),
Km + qt(level, df=nrow(df)-2) *sqrt(sebeta1 / beta[1]^2 + beta[2]^2 * sebeta0 / beta[1]^4 - 2 * beta[2] * vcov(m)[2,1] / beta[1]^3))) |>
cbind(estimate=parms[names(parms)[2:5]]) # add se, t and p value test
})
statistics <- with(one_s$params, {
beta <- coef(one_s)
names(beta)<-NULL
one_s |>
confint(level = level) |>
rbind(Vmax=c(
Vmax - qt(level, df=nrow(df)-2) * sebeta0^2 / beta[1]^2,
Vmax + qt(level, df=nrow(df)-2) * sebeta0^2 / beta[1]^2)) |>
rbind(Km=c(
Km - qt(level, df=nrow(df)-2) * sqrt(sebeta1^2 / beta[1]^2 + beta[2]^2 * sebeta0 / beta[1]^4 - 2 * beta[2] * vcov(one_s)[2,1] / beta[1]^3),
Km + qt(level, df=nrow(df)-2) *sqrt(sebeta1 / beta[1]^2 + beta[2]^2 * sebeta0 / beta[1]^4 - 2 * beta[2] * vcov(one_s)[2,1] / beta[1]^3))) |>
cbind(estimate=parms[names(parms)[2:5]]) # add se, t and p value test
})
statistics <- with(one_s$params, {
beta <- coef(one_s)
names(beta)<-NULL
one_s |>
confint(level = level) |>
rbind(Vmax=c(
Vmax - qt(level, df=nrow(df)-2) * sebeta0^2 / beta[1]^2,
Vmax + qt(level, df=nrow(df)-2) * sebeta0^2 / beta[1]^2)) |>
rbind(Km=c(
Km - qt(level, df=nrow(df)-2) * sqrt(sebeta1^2 / beta[1]^2 + beta[2]^2 * sebeta0 / beta[1]^4 - 2 * beta[2] * vcov(one_s)[2,1] / beta[1]^3),
Km + qt(level, df=nrow(df)-2) *sqrt(sebeta1 / beta[1]^2 + beta[2]^2 * sebeta0 / beta[1]^4 - 2 * beta[2] * vcov(one_s)[2,1] / beta[1]^3))) |>
cbind(estimate=list(beta[1],beta[2],Vmax,Km)) # add se, t and p value test
})
statistics
statistics <- with(one_s$params, {
beta <- coef(one_s)
names(beta)<-NULL
one_s |>
confint(level = level) |>
rbind(Vmax=c(
Vmax - qt(level, df=nrow(df)-2) * sebeta0 / beta[1]^2,
Vmax + qt(level, df=nrow(df)-2) * sebeta0 / beta[1]^2)) |>
rbind(Km=c(
Km - qt(level, df=nrow(df)-2) * sqrt(sebeta1^2 / beta[1]^2 + beta[2]^2 * sebeta0 / beta[1]^4 - 2 * beta[2] * vcov(one_s)[2,1] / beta[1]^3),
Km + qt(level, df=nrow(df)-2) *sqrt(sebeta1 / beta[1]^2 + beta[2]^2 * sebeta0 / beta[1]^4 - 2 * beta[2] * vcov(one_s)[2,1] / beta[1]^3))) |>
cbind(estimate=list(beta[1],beta[2],Vmax,Km)) # add se, t and p value test
})
statistics
vcov(one_s)
cov(one_s)
v
statistics <- with(one_s$params, {
beta <- coef(one_s)
names(beta)<-NULL
seVmax = sebeta0 / beta[1]^2 # Error propagation aproximation to non-linear transformation over variance
seKm = sqrt(sebeta1^2 / beta[1]^2 + beta[2]^2 * sebeta0 / beta[1]^4 - 2 * beta[2] * vcov(one_s)[2,1] / beta[1]^3)
one_s |>
confint(level = level) |>
rbind(Vmax=c(
Vmax - qt(level, df=nrow(df)-2) * seVmax,
Vmax + qt(level, df=nrow(df)-2) * seVmax)) |>
rbind(Km=c(
Km - qt(level, df=nrow(df)-2) * seKm,
Km + qt(level, df=nrow(df)-2) * seKm)) |>
cbind(estimate=list(beta[1],beta[2],Vmax,Km)) |> # add se, t and p value test
cbind(se = list[sebeta0,sebeta1, seVmax, seKm])
})
statistics <- with(one_s$params, {
beta <- coef(one_s)
names(beta)<-NULL
seVmax = sebeta0 / beta[1]^2 # Error propagation aproximation to non-linear transformation over variance
seKm = sqrt(sebeta1^2 / beta[1]^2 + beta[2]^2 * sebeta0 / beta[1]^4 - 2 * beta[2] * vcov(one_s)[2,1] / beta[1]^3)
one_s |>
confint(level = level) |>
rbind(Vmax=c(
Vmax - qt(level, df=nrow(df)-2) * seVmax,
Vmax + qt(level, df=nrow(df)-2) * seVmax)) |>
rbind(Km=c(
Km - qt(level, df=nrow(df)-2) * seKm,
Km + qt(level, df=nrow(df)-2) * seKm)) |>
cbind(estimate=list(beta[1],beta[2],Vmax,Km)) |> # add se, t and p value test
cbind(se = list(sebeta0,sebeta1, seVmax, seKm))
})
statistics
statistics <- with(one_s$params, {
beta <- coef(one_s)
names(beta)<-NULL
seVmax = sebeta0 / beta[1]^2 # Error propagation aproximation to non-linear transformation over variance
seKm = sqrt(sebeta1^2 / beta[1]^2 + beta[2]^2 * sebeta0 / beta[1]^4 - 2 * beta[2] * vcov(one_s)[2,1] / beta[1]^3)
one_s |>
confint(level = level) |>
rbind(Vmax=c(
Vmax - qt(level, df=nrow(df)-2) * seVmax,
Vmax + qt(level, df=nrow(df)-2) * seVmax)) |>
rbind(Km=c(
Km - qt(level, df=nrow(df)-2) * seKm,
Km + qt(level, df=nrow(df)-2) * seKm)) |>
cbind(estimate=list(beta[1],beta[2],Vmax,Km)) |> # add se, t and p value test
cbind(se = list(sebeta0,sebeta1, seVmax, seKm)) |>
cbind(t = estimate/se)
})
library(devtools)
check()
fit_params(df,model="one-substrate",method="hanes")
data.frame(
estimate=list(beta[1],beta[2],Vmax,Km),
)
a=data.frame(
estimate=list(beta[1],beta[2],onesubstrate$params$Vmax,onesubstrate$params$Km),
)
onesubstrate$params
View(kinetics)
data.frame(
estimate=list(beta[1],beta[2],one_s$Vmax,one_s$Km),
)
one_s
one_s$params
one_s$params$Vmax
data.frame(
estimate=list(beta[1],beta[2],one_s$params$Vmax,one_s$params$Km),
)
list(beta[1],beta[2],one_s$params$Vmax,one_s$params$Km)
data.frame(
estimate=c(beta[1],beta[2],one_s$params$Vmax,one_s$params$Km),
)
estimate=c(beta[1],beta[2],one_s$params$Vmax,one_s$params$Km)
estimate
data.frame() |>
cbind(estimate=list(beta[1],beta[2],Vmax,Km))
attach(one_s$params)
data.frame() |>
cbind(estimate=list(beta[1],beta[2],Vmax,Km))
matrix(nrow=4,ncol=1) |>
cbind(estimate=list(beta[1],beta[2],Vmax,Km))
matrix(nrow=4,ncol=0) |>
cbind(estimate=list(beta[1],beta[2],Vmax,Km))
matrix(nrow=4,ncol=0) |> names(c("Intercept","S","Vmax","Km"))
matrix(nrow=4,ncol=0) |>
cbind(estimate=list(beta[1],beta[2],Vmax,Km)) |>
cbind(se = list(sebeta0, sebeta1, seVmax, seKm))
beta <- coef(one_s)
names(beta)<-NULL
seVmax = sebeta0 / beta[1]^2 # Error propagation aproximation to non-linear transformation over variance
seKm = sqrt(sebeta1^2 / beta[1]^2 + beta[2]^2 * sebeta0^2 / beta[1]^4 - 2 * beta[2] * vcov(one_s)[2,1] / beta[1]^3)
t0 = qt(level, df=nrow(df)-2)
matrix(nrow=4,ncol=0) |>
cbind(estimate=list(beta[1],beta[2],Vmax,Km)) |>
cbind(se = list(sebeta0, sebeta1, seVmax, seKm))
summary(one_s)
20.4770/26.6114
matrix(nrow=4,ncol=0) |>
cbind(estimate=list(beta[1],beta[2],Vmax,Km)) |>
cbind(se = list(sebeta0, sebeta1, seVmax, seKm)) |>
cbind(t_value = estimate/se)
matrix(nrow=4,ncol=0) |>
cbind(estimate=list(beta[1],beta[2],Vmax,Km), se = list(sebeta0, sebeta1, seVmax, seKm)) |>
cbind(t_value = estimate/se)
st <- matrix(nrow=4,ncol=0) |>
cbind(estimate=list(beta[1],beta[2],Vmax,Km)) |>
cbind(se = list(sebeta0, sebeta1, seVmax, seKm))
st
q()
